{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 39,
  "lineage": "d7585618-1e48-35aa-73b2-f36456b273c9",
  "outputs": {
    "application_url": {
      "value": "http://34.85.26.79",
      "type": "string"
    },
    "instance_ip": {
      "value": "34.85.26.79",
      "type": "string"
    },
    "load_balancer_ip": {
      "value": "34.111.39.35",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow_http",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "80",
                  "443",
                  "8080"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2025-07-22T07:56:33.043-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/nennkinn-claude/global/firewalls/disability-pension-allow-http",
            "log_config": [],
            "name": "disability-pension-allow-http",
            "network": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/networks/disability-pension-vpc",
            "priority": 1000,
            "project": "nennkinn-claude",
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/firewalls/disability-pension-allow-http",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": [
              "web-server"
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.main",
            "google_project_service.apis"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow_ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "22"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2025-07-22T07:56:32.977-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/nennkinn-claude/global/firewalls/disability-pension-allow-ssh",
            "log_config": [],
            "name": "disability-pension-allow-ssh",
            "network": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/networks/disability-pension-vpc",
            "priority": 1000,
            "project": "nennkinn-claude",
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/firewalls/disability-pension-allow-ssh",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": [
              "ssh-server"
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.main",
            "google_project_service.apis"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_global_address",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "34.111.39.35",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2025-07-22T07:52:18.606-07:00",
            "description": "",
            "effective_labels": {},
            "id": "projects/nennkinn-claude/global/addresses/disability-pension-ip",
            "ip_version": "",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": {},
            "name": "disability-pension-ip",
            "network": "",
            "prefix_length": 0,
            "project": "nennkinn-claude",
            "purpose": "",
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/addresses/disability-pension-ip",
            "terraform_labels": {},
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20250712",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": null,
                    "size": 20,
                    "storage_pool": "",
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/zones/asia-northeast1-a/disks/disability-pension-vm"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/nennkinn-claude/zones/asia-northeast1-a/instances/disability-pension-vm",
            "instance_id": "7377670244591081533",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "1xajk7orrR0=",
            "metadata_startup_script": "#!/bin/bash\n\nset -e\n\n# Update system\napt-get update\napt-get upgrade -y\n\n# Install Docker\napt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\napt-get update\napt-get install -y docker-ce docker-ce-cli containerd.io\n\n# Install Docker Compose\ncurl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\n# Install Git, Node.js and other tools\napt-get install -y git htop nginx nodejs npm\n\n# Start services\nsystemctl start docker\nsystemctl enable docker\nsystemctl start nginx\nsystemctl enable nginx\n\n# Create application user\nuseradd -m -s /bin/bash deploy\nusermod -aG docker deploy\nusermod -aG sudo deploy\n\n# Create application directory\nmkdir -p /opt/disability-pension\nchown deploy:deploy /opt/disability-pension\n\n# Get external IP\nEXTERNAL_IP=$(curl -s http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip -H \"Metadata-Flavor: Google\")\n\n# Create a simple Node.js application\nsu - deploy \u003c\u003c 'EOF'\ncd /opt/disability-pension\n\n# Create a simple Express.js application\ncat \u003e package.json \u003c\u003c 'PACKAGE_EOF'\n{\n  \"name\": \"disability-pension-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Disability Pension Management System\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"cors\": \"^2.8.5\",\n    \"body-parser\": \"^1.20.2\",\n    \"sqlite3\": \"^5.1.6\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.2\"\n  }\n}\nPACKAGE_EOF\n\n# Create the main application file\ncat \u003e index.js \u003c\u003c 'APP_EOF'\nconst express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst sqlite3 = require('sqlite3').verbose();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst path = require('path');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\nconst JWT_SECRET = 'disability-pension-secret-key-2024';\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// Initialize SQLite database\nconst db = new sqlite3.Database('./disability_pension.db');\n\n// Create tables\ndb.serialize(() =\u003e {\n  // Users table\n  db.run(`\n    CREATE TABLE IF NOT EXISTS users (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      email TEXT UNIQUE NOT NULL,\n      password TEXT NOT NULL,\n      name TEXT NOT NULL,\n      role TEXT DEFAULT 'staff',\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Applications table\n  db.run(`\n    CREATE TABLE IF NOT EXISTS applications (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      application_number TEXT UNIQUE NOT NULL,\n      applicant_name TEXT NOT NULL,\n      applicant_name_kana TEXT NOT NULL,\n      birth_date DATE NOT NULL,\n      gender TEXT NOT NULL,\n      phone_number TEXT,\n      email TEXT,\n      disability_type TEXT NOT NULL,\n      disability_grade INTEGER,\n      status TEXT DEFAULT 'draft',\n      created_by INTEGER,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (created_by) REFERENCES users (id)\n    )\n  `);\n\n  // Create default admin user\n  const adminPassword = bcrypt.hashSync('admin123', 10);\n  db.run(`\n    INSERT OR IGNORE INTO users (email, password, name, role) \n    VALUES ('admin@disability-pension.jp', ?, '管理者', 'admin')\n  `, [adminPassword]);\n\n  // Create sample applications\n  db.run(`\n    INSERT OR IGNORE INTO applications (\n      application_number, applicant_name, applicant_name_kana, \n      birth_date, gender, disability_type, disability_grade, created_by\n    ) VALUES \n    ('DP202401001', '田中太郎', 'タナカタロウ', '1980-05-15', 'male', 'physical', 2, 1),\n    ('DP202401002', '佐藤花子', 'サトウハナコ', '1975-08-22', 'female', 'mental', 1, 1),\n    ('DP202401003', '山田次郎', 'ヤマダジロウ', '1990-03-10', 'male', 'intellectual', 3, 1)\n  `);\n});\n\n// Auth middleware\nconst authenticateToken = (req, res, next) =\u003e {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader \u0026\u0026 authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.sendStatus(401);\n  }\n\n  jwt.verify(token, JWT_SECRET, (err, user) =\u003e {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n\n// Routes\napp.get('/', (req, res) =\u003e {\n  res.json({\n    message: '障害年金管理システム API',\n    version: '1.0.0',\n    status: 'running',\n    endpoints: {\n      health: '/health',\n      auth: '/api/auth',\n      applications: '/api/applications'\n    }\n  });\n});\n\napp.get('/health', (req, res) =\u003e {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Auth endpoints\napp.post('/api/auth/login', (req, res) =\u003e {\n  const { email, password } = req.body;\n\n  db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) =\u003e {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    if (!user || !bcrypt.compareSync(password, user.password)) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    const token = jwt.sign(\n      { id: user.id, email: user.email, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    res.json({\n      message: 'Login successful',\n      user: { id: user.id, email: user.email, name: user.name, role: user.role },\n      token\n    });\n  });\n});\n\n// Applications endpoints\napp.get('/api/applications', authenticateToken, (req, res) =\u003e {\n  db.all(`\n    SELECT a.*, u.name as created_by_name \n    FROM applications a \n    LEFT JOIN users u ON a.created_by = u.id \n    ORDER BY a.created_at DESC\n  `, (err, applications) =\u003e {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n    res.json({ applications });\n  });\n});\n\napp.get('/api/applications/:id', authenticateToken, (req, res) =\u003e {\n  const { id } = req.params;\n  \n  db.get(`\n    SELECT a.*, u.name as created_by_name \n    FROM applications a \n    LEFT JOIN users u ON a.created_by = u.id \n    WHERE a.id = ?\n  `, [id], (err, application) =\u003e {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n    if (!application) {\n      return res.status(404).json({ error: 'Application not found' });\n    }\n    res.json({ application });\n  });\n});\n\napp.post('/api/applications', authenticateToken, (req, res) =\u003e {\n  const {\n    applicant_name,\n    applicant_name_kana,\n    birth_date,\n    gender,\n    phone_number,\n    email,\n    disability_type,\n    disability_grade\n  } = req.body;\n\n  // Generate application number\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  \n  db.get('SELECT COUNT(*) as count FROM applications WHERE strftime(\"%Y\", created_at) = ?', [year.toString()], (err, result) =\u003e {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    const count = result.count + 1;\n    const application_number = `DP${year}${month}${String(count).padStart(5, '0')}`;\n\n    db.run(`\n      INSERT INTO applications (\n        application_number, applicant_name, applicant_name_kana,\n        birth_date, gender, phone_number, email,\n        disability_type, disability_grade, created_by\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      application_number, applicant_name, applicant_name_kana,\n      birth_date, gender, phone_number, email,\n      disability_type, disability_grade, req.user.id\n    ], function(err) {\n      if (err) {\n        return res.status(500).json({ error: 'Database error' });\n      }\n\n      res.status(201).json({\n        message: 'Application created successfully',\n        application_id: this.lastID,\n        application_number\n      });\n    });\n  });\n});\n\n// Statistics endpoint\napp.get('/api/applications/statistics/overview', authenticateToken, (req, res) =\u003e {\n  db.all(`\n    SELECT \n      status,\n      COUNT(*) as count\n    FROM applications \n    GROUP BY status\n  `, (err, statusStats) =\u003e {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    db.all(`\n      SELECT \n        strftime('%Y-%m', created_at) as month,\n        COUNT(*) as count\n      FROM applications \n      WHERE created_at \u003e= date('now', '-12 months')\n      GROUP BY strftime('%Y-%m', created_at)\n      ORDER BY month ASC\n    `, (err, monthlyStats) =\u003e {\n      if (err) {\n        return res.status(500).json({ error: 'Database error' });\n      }\n\n      res.json({\n        statusStats,\n        monthlyStats\n      });\n    });\n  });\n});\n\n// Serve static files\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Catch-all handler for SPA\napp.get('*', (req, res) =\u003e {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.listen(PORT, '0.0.0.0', () =\u003e {\n  console.log(`Server running on http://0.0.0.0:${PORT}`);\n});\nAPP_EOF\n\n# Install dependencies\nnpm install\n\n# Create public directory and simple HTML\nmkdir -p public\n\ncat \u003e public/index.html \u003c\u003c 'HTML_EOF'\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"ja\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003e障害年金管理システム\u003c/title\u003e\n    \u003cscript src=\"https://cdn.tailwindcss.com\"\u003e\u003c/script\u003e\n    \u003cstyle\u003e\n        body { font-family: 'Hiragino Sans', 'Yu Gothic', sans-serif; }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody class=\"bg-gray-100\"\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cnav class=\"bg-blue-600 text-white p-4\"\u003e\n            \u003cdiv class=\"container mx-auto flex justify-between items-center\"\u003e\n                \u003ch1 class=\"text-xl font-bold\"\u003e障害年金管理システム\u003c/h1\u003e\n                \u003cdiv id=\"user-info\" class=\"hidden\"\u003e\n                    \u003cspan id=\"username\"\u003e\u003c/span\u003e\n                    \u003cbutton onclick=\"logout()\" class=\"ml-4 bg-red-500 hover:bg-red-600 px-3 py-1 rounded\"\u003eログアウト\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n\n        \u003c!-- Login Form --\u003e\n        \u003cdiv id=\"login-form\" class=\"container mx-auto mt-8 max-w-md\"\u003e\n            \u003cdiv class=\"bg-white p-8 rounded-lg shadow-md\"\u003e\n                \u003ch2 class=\"text-2xl font-bold mb-6 text-center\"\u003eログイン\u003c/h2\u003e\n                \u003cform onsubmit=\"login(event)\"\u003e\n                    \u003cdiv class=\"mb-4\"\u003e\n                        \u003clabel class=\"block text-sm font-bold mb-2\"\u003eメールアドレス\u003c/label\u003e\n                        \u003cinput type=\"email\" id=\"email\" required class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"mb-6\"\u003e\n                        \u003clabel class=\"block text-sm font-bold mb-2\"\u003eパスワード\u003c/label\u003e\n                        \u003cinput type=\"password\" id=\"password\" required class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\"\u003e\n                        ログイン\n                    \u003c/button\u003e\n                \u003c/form\u003e\n                \u003cdiv class=\"mt-4 p-4 bg-gray-50 rounded\"\u003e\n                    \u003ch3 class=\"font-bold text-sm\"\u003eテストアカウント:\u003c/h3\u003e\n                    \u003cp class=\"text-sm\"\u003eメール: admin@disability-pension.jp\u003c/p\u003e\n                    \u003cp class=\"text-sm\"\u003eパスワード: admin123\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003c!-- Dashboard --\u003e\n        \u003cdiv id=\"dashboard\" class=\"hidden container mx-auto mt-8\"\u003e\n            \u003cdiv class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\"\u003e\n                \u003cdiv class=\"bg-white p-6 rounded-lg shadow-md\"\u003e\n                    \u003ch3 class=\"text-lg font-bold text-gray-700\"\u003e総申請数\u003c/h3\u003e\n                    \u003cp id=\"total-applications\" class=\"text-3xl font-bold text-blue-600\"\u003e-\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"bg-white p-6 rounded-lg shadow-md\"\u003e\n                    \u003ch3 class=\"text-lg font-bold text-gray-700\"\u003e審査中\u003c/h3\u003e\n                    \u003cp id=\"under-review\" class=\"text-3xl font-bold text-yellow-600\"\u003e-\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"bg-white p-6 rounded-lg shadow-md\"\u003e\n                    \u003ch3 class=\"text-lg font-bold text-gray-700\"\u003e承認済み\u003c/h3\u003e\n                    \u003cp id=\"approved\" class=\"text-3xl font-bold text-green-600\"\u003e-\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"bg-white rounded-lg shadow-md\"\u003e\n                \u003cdiv class=\"p-6 border-b\"\u003e\n                    \u003ch2 class=\"text-xl font-bold\"\u003e申請一覧\u003c/h2\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"overflow-x-auto\"\u003e\n                    \u003ctable class=\"w-full\"\u003e\n                        \u003cthead class=\"bg-gray-50\"\u003e\n                            \u003ctr\u003e\n                                \u003cth class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\u003e申請番号\u003c/th\u003e\n                                \u003cth class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\u003e申請者名\u003c/th\u003e\n                                \u003cth class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\u003e障害種別\u003c/th\u003e\n                                \u003cth class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\u003e等級\u003c/th\u003e\n                                \u003cth class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\u003eステータス\u003c/th\u003e\n                                \u003cth class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\u003e作成日\u003c/th\u003e\n                            \u003c/tr\u003e\n                        \u003c/thead\u003e\n                        \u003ctbody id=\"applications-table\" class=\"bg-white divide-y divide-gray-200\"\u003e\n                        \u003c/tbody\u003e\n                    \u003c/table\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript\u003e\n        let currentUser = null;\n        let authToken = null;\n\n        // Check if user is already logged in\n        window.onload = function() {\n            const token = localStorage.getItem('authToken');\n            if (token) {\n                authToken = token;\n                showDashboard();\n                loadApplications();\n                loadStatistics();\n            }\n        };\n\n        async function login(event) {\n            event.preventDefault();\n            const email = document.getElementById('email').value;\n            const password = document.getElementById('password').value;\n\n            try {\n                const response = await fetch('/api/auth/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ email, password })\n                });\n\n                const data = await response.json();\n\n                if (response.ok) {\n                    currentUser = data.user;\n                    authToken = data.token;\n                    localStorage.setItem('authToken', authToken);\n                    showDashboard();\n                    loadApplications();\n                    loadStatistics();\n                } else {\n                    alert('ログインに失敗しました: ' + data.error);\n                }\n            } catch (error) {\n                alert('エラーが発生しました: ' + error.message);\n            }\n        }\n\n        function logout() {\n            currentUser = null;\n            authToken = null;\n            localStorage.removeItem('authToken');\n            showLogin();\n        }\n\n        function showLogin() {\n            document.getElementById('login-form').classList.remove('hidden');\n            document.getElementById('dashboard').classList.add('hidden');\n            document.getElementById('user-info').classList.add('hidden');\n        }\n\n        function showDashboard() {\n            document.getElementById('login-form').classList.add('hidden');\n            document.getElementById('dashboard').classList.remove('hidden');\n            document.getElementById('user-info').classList.remove('hidden');\n            if (currentUser) {\n                document.getElementById('username').textContent = currentUser.name;\n            }\n        }\n\n        async function loadApplications() {\n            try {\n                const response = await fetch('/api/applications', {\n                    headers: {\n                        'Authorization': `Bearer ${authToken}`\n                    }\n                });\n\n                const data = await response.json();\n\n                if (response.ok) {\n                    const tbody = document.getElementById('applications-table');\n                    tbody.innerHTML = '';\n\n                    data.applications.forEach(app =\u003e {\n                        const row = document.createElement('tr');\n                        row.innerHTML = `\n                            \u003ctd class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\"\u003e${app.application_number}\u003c/td\u003e\n                            \u003ctd class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\"\u003e${app.applicant_name}\u003c/td\u003e\n                            \u003ctd class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\"\u003e${getDisabilityTypeText(app.disability_type)}\u003c/td\u003e\n                            \u003ctd class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\"\u003e${app.disability_grade || '-'}級\u003c/td\u003e\n                            \u003ctd class=\"px-6 py-4 whitespace-nowrap\"\u003e\n                                \u003cspan class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(app.status)}\"\u003e\n                                    ${getStatusText(app.status)}\n                                \u003c/span\u003e\n                            \u003c/td\u003e\n                            \u003ctd class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"\u003e${formatDate(app.created_at)}\u003c/td\u003e\n                        `;\n                        tbody.appendChild(row);\n                    });\n\n                    document.getElementById('total-applications').textContent = data.applications.length;\n                }\n            } catch (error) {\n                console.error('Error loading applications:', error);\n            }\n        }\n\n        async function loadStatistics() {\n            try {\n                const response = await fetch('/api/applications/statistics/overview', {\n                    headers: {\n                        'Authorization': `Bearer ${authToken}`\n                    }\n                });\n\n                const data = await response.json();\n\n                if (response.ok) {\n                    const underReview = data.statusStats.find(s =\u003e s.status === 'under_review');\n                    const approved = data.statusStats.find(s =\u003e s.status === 'approved');\n\n                    document.getElementById('under-review').textContent = underReview ? underReview.count : 0;\n                    document.getElementById('approved').textContent = approved ? approved.count : 0;\n                }\n            } catch (error) {\n                console.error('Error loading statistics:', error);\n            }\n        }\n\n        function getDisabilityTypeText(type) {\n            const types = {\n                'physical': '身体障害',\n                'mental': '精神障害',\n                'intellectual': '知的障害',\n                'multiple': '重複障害'\n            };\n            return types[type] || type;\n        }\n\n        function getStatusText(status) {\n            const statuses = {\n                'draft': '下書き',\n                'submitted': '提出済み',\n                'under_review': '審査中',\n                'approved': '承認済み',\n                'rejected': '却下',\n                'withdrawn': '取り下げ'\n            };\n            return statuses[status] || status;\n        }\n\n        function getStatusColor(status) {\n            const colors = {\n                'draft': 'bg-gray-100 text-gray-800',\n                'submitted': 'bg-blue-100 text-blue-800',\n                'under_review': 'bg-yellow-100 text-yellow-800',\n                'approved': 'bg-green-100 text-green-800',\n                'rejected': 'bg-red-100 text-red-800',\n                'withdrawn': 'bg-gray-100 text-gray-800'\n            };\n            return colors[status] || 'bg-gray-100 text-gray-800';\n        }\n\n        function formatDate(dateString) {\n            const date = new Date(dateString);\n            return date.toLocaleDateString('ja-JP');\n        }\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\nHTML_EOF\n\n# Start the application\nnohup npm start \u003e app.log 2\u003e\u00261 \u0026\n\nEOF\n\n# Configure Nginx reverse proxy\ncat \u003e /etc/nginx/sites-available/disability-pension \u003c\u003c 'NGINX_EOF'\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n\n    # Health check endpoint\n    location /nginx-health {\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n\n    # Proxy to Node.js application\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\nNGINX_EOF\n\n# Enable the site\nln -sf /etc/nginx/sites-available/disability-pension /etc/nginx/sites-enabled/\nrm -f /etc/nginx/sites-enabled/default\n\n# Test and reload Nginx\nnginx -t \u0026\u0026 systemctl reload nginx\n\n# Install and configure Cloud Logging agent\ncurl -sSO https://dl.google.com/cloudagents/add-logging-agent-repo.sh\nbash add-logging-agent-repo.sh --also-install\n\n# Final setup completion log\necho \"Startup script completed successfully at $(date)\" \u003e\u003e /var/log/startup.log\necho \"Application should be available at http://$EXTERNAL_IP\" \u003e\u003e /var/log/startup.log",
            "min_cpu_platform": "",
            "name": "disability-pension-vm",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.85.26.79",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/networks/disability-pension-vpc",
                "network_ip": "10.0.0.2",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/regions/asia-northeast1/subnetworks/disability-pension-subnet",
                "subnetwork_project": "nennkinn-claude"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "nennkinn-claude",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "max_run_duration": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "on_instance_stop_action": [],
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/zones/asia-northeast1-a/instances/disability-pension-vm",
            "service_account": [
              {
                "email": "disability-pension-compute@nennkinn-claude.iam.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "ssh-server",
              "web-server"
            ],
            "tags_fingerprint": "OLmCYzcc788=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "asia-northeast1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.main",
            "google_compute_subnetwork.main",
            "google_project_service.apis",
            "google_service_account.compute"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_managed_ssl_certificate",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "certificate_id": 7549607264442784590,
            "creation_timestamp": "2025-07-22T07:52:18.496-07:00",
            "description": "",
            "expire_time": "",
            "id": "projects/nennkinn-claude/global/sslCertificates/disability-pension-ssl-cert",
            "managed": [
              {
                "domains": [
                  "disability-pension.nennkinn-claude.nip.io"
                ]
              }
            ],
            "name": "disability-pension-ssl-cert",
            "project": "nennkinn-claude",
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/sslCertificates/disability-pension-ssl-cert",
            "subject_alternative_names": [],
            "timeouts": null,
            "type": "MANAGED"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": false,
            "delete_default_routes_on_create": false,
            "description": "",
            "enable_ula_internal_ipv6": false,
            "gateway_ipv4": "",
            "id": "projects/nennkinn-claude/global/networks/disability-pension-vpc",
            "internal_ipv6_range": "",
            "mtu": 0,
            "name": "disability-pension-vpc",
            "network_firewall_policy_enforcement_order": "AFTER_CLASSIC_FIREWALL",
            "numeric_id": "2471253356879943781",
            "project": "nennkinn-claude",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/networks/disability-pension-vpc",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_project_service.apis"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2025-07-22T07:56:36.012-07:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.0.0.1",
            "id": "projects/nennkinn-claude/regions/asia-northeast1/subnetworks/disability-pension-subnet",
            "internal_ipv6_prefix": "",
            "ip_cidr_range": "10.0.0.0/24",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "disability-pension-subnet",
            "network": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/global/networks/disability-pension-vpc",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "nennkinn-claude",
            "purpose": "PRIVATE",
            "region": "asia-northeast1",
            "role": "",
            "secondary_ip_range": [
              {
                "ip_cidr_range": "10.1.0.0/16",
                "range_name": "pods"
              },
              {
                "ip_cidr_range": "10.2.0.0/16",
                "range_name": "services"
              }
            ],
            "self_link": "https://www.googleapis.com/compute/v1/projects/nennkinn-claude/regions/asia-northeast1/subnetworks/disability-pension-subnet",
            "send_secondary_ip_range_if_empty": null,
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.main",
            "google_project_service.apis"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_service",
      "name": "apis",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "cloudbuild.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/cloudbuild.googleapis.com",
            "project": "nennkinn-claude",
            "service": "cloudbuild.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "cloudresourcemanager.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/cloudresourcemanager.googleapis.com",
            "project": "nennkinn-claude",
            "service": "cloudresourcemanager.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "compute.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/compute.googleapis.com",
            "project": "nennkinn-claude",
            "service": "compute.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "container.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/container.googleapis.com",
            "project": "nennkinn-claude",
            "service": "container.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "iam.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/iam.googleapis.com",
            "project": "nennkinn-claude",
            "service": "iam.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "logging.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/logging.googleapis.com",
            "project": "nennkinn-claude",
            "service": "logging.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "monitoring.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/monitoring.googleapis.com",
            "project": "nennkinn-claude",
            "service": "monitoring.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "secretmanager.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/secretmanager.googleapis.com",
            "project": "nennkinn-claude",
            "service": "secretmanager.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "storage.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "nennkinn-claude/storage.googleapis.com",
            "project": "nennkinn-claude",
            "service": "storage.googleapis.com",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_account",
      "name": "compute",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "disability-pension-compute",
            "create_ignore_already_exists": null,
            "description": "",
            "disabled": false,
            "display_name": "Compute Engine Service Account",
            "email": "disability-pension-compute@nennkinn-claude.iam.gserviceaccount.com",
            "id": "projects/nennkinn-claude/serviceAccounts/disability-pension-compute@nennkinn-claude.iam.gserviceaccount.com",
            "member": "serviceAccount:disability-pension-compute@nennkinn-claude.iam.gserviceaccount.com",
            "name": "projects/nennkinn-claude/serviceAccounts/disability-pension-compute@nennkinn-claude.iam.gserviceaccount.com",
            "project": "nennkinn-claude",
            "timeouts": null,
            "unique_id": "115636695926279137637"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "backups",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "autoclass": [],
            "cors": [],
            "custom_placement_config": [],
            "default_event_based_hold": false,
            "effective_labels": {},
            "enable_object_retention": false,
            "encryption": [],
            "force_destroy": false,
            "id": "nennkinn-claude-disability-pension-backups",
            "labels": null,
            "lifecycle_rule": [
              {
                "action": [
                  {
                    "storage_class": "",
                    "type": "Delete"
                  }
                ],
                "condition": [
                  {
                    "age": 30,
                    "created_before": "",
                    "custom_time_before": "",
                    "days_since_custom_time": 0,
                    "days_since_noncurrent_time": 0,
                    "matches_prefix": [],
                    "matches_storage_class": [],
                    "matches_suffix": [],
                    "no_age": false,
                    "noncurrent_time_before": "",
                    "num_newer_versions": 0,
                    "send_age_if_zero": true,
                    "send_days_since_custom_time_if_zero": false,
                    "send_days_since_noncurrent_time_if_zero": false,
                    "send_num_newer_versions_if_zero": false,
                    "with_state": "ANY"
                  }
                ]
              }
            ],
            "location": "ASIA-NORTHEAST1",
            "logging": [],
            "name": "nennkinn-claude-disability-pension-backups",
            "project": "nennkinn-claude",
            "project_number": 5471796928,
            "public_access_prevention": "inherited",
            "requester_pays": false,
            "retention_policy": [],
            "rpo": null,
            "self_link": "https://www.googleapis.com/storage/v1/b/nennkinn-claude-disability-pension-backups",
            "soft_delete_policy": [
              {
                "effective_time": "2025-07-22T14:56:10.913Z",
                "retention_duration_seconds": 604800
              }
            ],
            "storage_class": "STANDARD",
            "terraform_labels": {},
            "timeouts": null,
            "uniform_bucket_level_access": false,
            "url": "gs://nennkinn-claude-disability-pension-backups",
            "versioning": [
              {
                "enabled": true
              }
            ],
            "website": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsInJlYWQiOjI0MDAwMDAwMDAwMCwidXBkYXRlIjoyNDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "google_project_service.apis"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
